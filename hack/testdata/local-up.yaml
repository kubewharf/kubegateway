apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kubegateway
spec:
  serviceName: kubegateway
  replicas: 1
  selector:
    matchLabels:
      app: kubegateway
  template:
    metadata:
      labels:
        app: kubegateway
    spec:
      containers:
      - name: kubegateway
        image: kube-gateway:local-up
        imagePullPolicy: IfNotPresent
        args:
        - --authorization-mode=RBAC
        - --client-ca-file=/etc/kubegateway/pki/ca.pem
        - --enable-proxy-access-log=true
        - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
        - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        - --etcd-servers=https://127.0.0.1:2379
        - --etcd-prefix=/registry/kubegateway
        - --secure-port=9443
        - --proxy-secure-ports=8443
        - --tls-cert-file=/etc/kubegateway/pki/kubegateway.pem
        - --tls-private-key-file=/etc/kubegateway/pki/kubegateway-key.pem
        - --v=5
        ports:
        - containerPort: 8443
          name: proxy
        - containerPort: 9443
          name: control-plane
        volumeMounts:
        - name: gateway-server-pki
          mountPath: /etc/kubegateway/pki
          readOnly: true
        - mountPath: /etc/kubernetes/pki
          name: k8s-certs
          readOnly: true
      hostNetwork: true
      volumes:
      - name: gateway-server-pki
        secret:
          secretName: gateway-sever-pki
      - name: k8s-certs
        hostPath:
          path: /etc/kubernetes/pki
          type: DirectoryOrCreate

---
# kubegateway service
apiVersion: v1
kind: Service
metadata:
  name: kubegateway
spec:
  type: ClusterIP
  selector:
    app: kubegateway
  ports:
  - name: proxy
    port: 8443
    protocol: TCP
    targetPort: 8443
  - name: control-plane
    port: 9443
    protocol: TCP
    targetPort: 9443

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubegateway
rules:
- apiGroups: [""]
  resources: ["users", "groups", "serviceaccounts"]
  verbs: ["impersonate"]
# Can set "Impersonate-Extra-scopes" header and the "Impersonate-Uid" header.
- apiGroups: ["authentication.k8s.io"]
  resources: ["userextras/scopes", "uids"]
  verbs: ["impersonate"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews", subjectaccessreviews]
  verbs: ["create"]
- nonResourceURLs: ["/healthz*", "/readyz*", "/livez*"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubegateway
subjects:
- kind: User
  name: kubegateway-upstream-client # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: kubegateway
  apiGroup: rbac.authorization.k8s.io
