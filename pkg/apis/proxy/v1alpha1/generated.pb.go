/*
Copyright 2022 ByteDance and its affiliates.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/kubewharf/kubegateway/pkg/apis/proxy/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *ClientConfig) Reset()      { *m = ClientConfig{} }
func (*ClientConfig) ProtoMessage() {}
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{0}
}
func (m *ClientConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConfig.Merge(m, src)
}
func (m *ClientConfig) XXX_Size() int {
	return m.Size()
}
func (m *ClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConfig proto.InternalMessageInfo

func (m *DispatchPolicy) Reset()      { *m = DispatchPolicy{} }
func (*DispatchPolicy) ProtoMessage() {}
func (*DispatchPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{1}
}
func (m *DispatchPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatchPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DispatchPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchPolicy.Merge(m, src)
}
func (m *DispatchPolicy) XXX_Size() int {
	return m.Size()
}
func (m *DispatchPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchPolicy proto.InternalMessageInfo

func (m *DispatchPolicyRule) Reset()      { *m = DispatchPolicyRule{} }
func (*DispatchPolicyRule) ProtoMessage() {}
func (*DispatchPolicyRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{2}
}
func (m *DispatchPolicyRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatchPolicyRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DispatchPolicyRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchPolicyRule.Merge(m, src)
}
func (m *DispatchPolicyRule) XXX_Size() int {
	return m.Size()
}
func (m *DispatchPolicyRule) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchPolicyRule.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchPolicyRule proto.InternalMessageInfo

func (m *ExemptFlowControlSchema) Reset()      { *m = ExemptFlowControlSchema{} }
func (*ExemptFlowControlSchema) ProtoMessage() {}
func (*ExemptFlowControlSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{3}
}
func (m *ExemptFlowControlSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExemptFlowControlSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExemptFlowControlSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExemptFlowControlSchema.Merge(m, src)
}
func (m *ExemptFlowControlSchema) XXX_Size() int {
	return m.Size()
}
func (m *ExemptFlowControlSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_ExemptFlowControlSchema.DiscardUnknown(m)
}

var xxx_messageInfo_ExemptFlowControlSchema proto.InternalMessageInfo

func (m *FlowControl) Reset()      { *m = FlowControl{} }
func (*FlowControl) ProtoMessage() {}
func (*FlowControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{4}
}
func (m *FlowControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlowControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowControl.Merge(m, src)
}
func (m *FlowControl) XXX_Size() int {
	return m.Size()
}
func (m *FlowControl) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowControl.DiscardUnknown(m)
}

var xxx_messageInfo_FlowControl proto.InternalMessageInfo

func (m *FlowControlSchema) Reset()      { *m = FlowControlSchema{} }
func (*FlowControlSchema) ProtoMessage() {}
func (*FlowControlSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{5}
}
func (m *FlowControlSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowControlSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlowControlSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowControlSchema.Merge(m, src)
}
func (m *FlowControlSchema) XXX_Size() int {
	return m.Size()
}
func (m *FlowControlSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowControlSchema.DiscardUnknown(m)
}

var xxx_messageInfo_FlowControlSchema proto.InternalMessageInfo

func (m *FlowControlSchemaConfiguration) Reset()      { *m = FlowControlSchemaConfiguration{} }
func (*FlowControlSchemaConfiguration) ProtoMessage() {}
func (*FlowControlSchemaConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{6}
}
func (m *FlowControlSchemaConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowControlSchemaConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlowControlSchemaConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowControlSchemaConfiguration.Merge(m, src)
}
func (m *FlowControlSchemaConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *FlowControlSchemaConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowControlSchemaConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_FlowControlSchemaConfiguration proto.InternalMessageInfo

func (m *LoggingConfig) Reset()      { *m = LoggingConfig{} }
func (*LoggingConfig) ProtoMessage() {}
func (*LoggingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{7}
}
func (m *LoggingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoggingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LoggingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingConfig.Merge(m, src)
}
func (m *LoggingConfig) XXX_Size() int {
	return m.Size()
}
func (m *LoggingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingConfig proto.InternalMessageInfo

func (m *MaxRequestsInflightFlowControlSchema) Reset()      { *m = MaxRequestsInflightFlowControlSchema{} }
func (*MaxRequestsInflightFlowControlSchema) ProtoMessage() {}
func (*MaxRequestsInflightFlowControlSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{8}
}
func (m *MaxRequestsInflightFlowControlSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxRequestsInflightFlowControlSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MaxRequestsInflightFlowControlSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxRequestsInflightFlowControlSchema.Merge(m, src)
}
func (m *MaxRequestsInflightFlowControlSchema) XXX_Size() int {
	return m.Size()
}
func (m *MaxRequestsInflightFlowControlSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxRequestsInflightFlowControlSchema.DiscardUnknown(m)
}

var xxx_messageInfo_MaxRequestsInflightFlowControlSchema proto.InternalMessageInfo

func (m *SecretReferecence) Reset()      { *m = SecretReferecence{} }
func (*SecretReferecence) ProtoMessage() {}
func (*SecretReferecence) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{9}
}
func (m *SecretReferecence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretReferecence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecretReferecence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretReferecence.Merge(m, src)
}
func (m *SecretReferecence) XXX_Size() int {
	return m.Size()
}
func (m *SecretReferecence) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretReferecence.DiscardUnknown(m)
}

var xxx_messageInfo_SecretReferecence proto.InternalMessageInfo

func (m *SecureServing) Reset()      { *m = SecureServing{} }
func (*SecureServing) ProtoMessage() {}
func (*SecureServing) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{10}
}
func (m *SecureServing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecureServing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecureServing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecureServing.Merge(m, src)
}
func (m *SecureServing) XXX_Size() int {
	return m.Size()
}
func (m *SecureServing) XXX_DiscardUnknown() {
	xxx_messageInfo_SecureServing.DiscardUnknown(m)
}

var xxx_messageInfo_SecureServing proto.InternalMessageInfo

func (m *ServiceAccountRef) Reset()      { *m = ServiceAccountRef{} }
func (*ServiceAccountRef) ProtoMessage() {}
func (*ServiceAccountRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{11}
}
func (m *ServiceAccountRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccountRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceAccountRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountRef.Merge(m, src)
}
func (m *ServiceAccountRef) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccountRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountRef proto.InternalMessageInfo

func (m *TokenBucketFlowControlSchema) Reset()      { *m = TokenBucketFlowControlSchema{} }
func (*TokenBucketFlowControlSchema) ProtoMessage() {}
func (*TokenBucketFlowControlSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{12}
}
func (m *TokenBucketFlowControlSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenBucketFlowControlSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TokenBucketFlowControlSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBucketFlowControlSchema.Merge(m, src)
}
func (m *TokenBucketFlowControlSchema) XXX_Size() int {
	return m.Size()
}
func (m *TokenBucketFlowControlSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBucketFlowControlSchema.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBucketFlowControlSchema proto.InternalMessageInfo

func (m *UpstreamCluster) Reset()      { *m = UpstreamCluster{} }
func (*UpstreamCluster) ProtoMessage() {}
func (*UpstreamCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{13}
}
func (m *UpstreamCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpstreamCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamCluster.Merge(m, src)
}
func (m *UpstreamCluster) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamCluster.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamCluster proto.InternalMessageInfo

func (m *UpstreamClusterList) Reset()      { *m = UpstreamClusterList{} }
func (*UpstreamClusterList) ProtoMessage() {}
func (*UpstreamClusterList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{14}
}
func (m *UpstreamClusterList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamClusterList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpstreamClusterList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamClusterList.Merge(m, src)
}
func (m *UpstreamClusterList) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamClusterList) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamClusterList.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamClusterList proto.InternalMessageInfo

func (m *UpstreamClusterServer) Reset()      { *m = UpstreamClusterServer{} }
func (*UpstreamClusterServer) ProtoMessage() {}
func (*UpstreamClusterServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{15}
}
func (m *UpstreamClusterServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamClusterServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpstreamClusterServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamClusterServer.Merge(m, src)
}
func (m *UpstreamClusterServer) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamClusterServer) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamClusterServer.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamClusterServer proto.InternalMessageInfo

func (m *UpstreamClusterSpec) Reset()      { *m = UpstreamClusterSpec{} }
func (*UpstreamClusterSpec) ProtoMessage() {}
func (*UpstreamClusterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{16}
}
func (m *UpstreamClusterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamClusterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpstreamClusterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamClusterSpec.Merge(m, src)
}
func (m *UpstreamClusterSpec) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamClusterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamClusterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamClusterSpec proto.InternalMessageInfo

func (m *UpstreamClusterStatus) Reset()      { *m = UpstreamClusterStatus{} }
func (*UpstreamClusterStatus) ProtoMessage() {}
func (*UpstreamClusterStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d037ab291b4fff89, []int{17}
}
func (m *UpstreamClusterStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamClusterStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpstreamClusterStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamClusterStatus.Merge(m, src)
}
func (m *UpstreamClusterStatus) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamClusterStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamClusterStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamClusterStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClientConfig)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.ClientConfig")
	proto.RegisterType((*DispatchPolicy)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.DispatchPolicy")
	proto.RegisterType((*DispatchPolicyRule)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.DispatchPolicyRule")
	proto.RegisterType((*ExemptFlowControlSchema)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.ExemptFlowControlSchema")
	proto.RegisterType((*FlowControl)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.FlowControl")
	proto.RegisterType((*FlowControlSchema)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.FlowControlSchema")
	proto.RegisterType((*FlowControlSchemaConfiguration)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.FlowControlSchemaConfiguration")
	proto.RegisterType((*LoggingConfig)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.LoggingConfig")
	proto.RegisterType((*MaxRequestsInflightFlowControlSchema)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.MaxRequestsInflightFlowControlSchema")
	proto.RegisterType((*SecretReferecence)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.SecretReferecence")
	proto.RegisterType((*SecureServing)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.SecureServing")
	proto.RegisterType((*ServiceAccountRef)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.ServiceAccountRef")
	proto.RegisterType((*TokenBucketFlowControlSchema)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.TokenBucketFlowControlSchema")
	proto.RegisterType((*UpstreamCluster)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.UpstreamCluster")
	proto.RegisterType((*UpstreamClusterList)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.UpstreamClusterList")
	proto.RegisterType((*UpstreamClusterServer)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.UpstreamClusterServer")
	proto.RegisterType((*UpstreamClusterSpec)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.UpstreamClusterSpec")
	proto.RegisterType((*UpstreamClusterStatus)(nil), "github.com.kubewharf.kubegateway.pkg.apis.proxy.v1alpha1.UpstreamClusterStatus")
}

func init() {
	proto.RegisterFile("github.com/kubewharf/kubegateway/pkg/apis/proxy/v1alpha1/generated.proto", fileDescriptor_d037ab291b4fff89)
}

var fileDescriptor_d037ab291b4fff89 = []byte{
	// 1515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x6f, 0xdb, 0xc6,
	0x12, 0x37, 0x25, 0xcb, 0x96, 0x96, 0xfe, 0xbb, 0x7e, 0x86, 0xf5, 0x8c, 0x44, 0x32, 0xf8, 0x5e,
	0x0b, 0x03, 0x69, 0xa9, 0x5a, 0x08, 0xda, 0xa0, 0x68, 0x0f, 0xa6, 0xed, 0x24, 0x46, 0xec, 0xc4,
	0x59, 0xc5, 0x41, 0x51, 0x14, 0x45, 0x29, 0x7a, 0x4d, 0xb3, 0x96, 0x48, 0x7a, 0x77, 0xe9, 0x3f,
	0x45, 0x0f, 0x39, 0xe4, 0x52, 0xa0, 0x28, 0x7a, 0xea, 0xa9, 0xe8, 0xbd, 0xdf, 0xc4, 0xb7, 0xe6,
	0x98, 0x43, 0x2b, 0x34, 0xcc, 0xa9, 0x5f, 0x21, 0xa7, 0x62, 0x97, 0x4b, 0x91, 0x14, 0xed, 0xd8,
	0x70, 0x7c, 0x23, 0x67, 0x7e, 0x3b, 0x33, 0x3b, 0x3b, 0x33, 0xfb, 0x5b, 0x70, 0xdf, 0x76, 0xd8,
	0x5e, 0xd0, 0xd6, 0x2d, 0xaf, 0xdb, 0xd8, 0x0f, 0xda, 0xf8, 0x68, 0xcf, 0x24, 0xbb, 0xe2, 0xcb,
	0x36, 0x19, 0x3e, 0x32, 0x4f, 0x1a, 0xfe, 0xbe, 0xdd, 0x30, 0x7d, 0x87, 0x36, 0x7c, 0xe2, 0x1d,
	0x9f, 0x34, 0x0e, 0x97, 0xcc, 0x8e, 0xbf, 0x67, 0x2e, 0x35, 0x6c, 0xec, 0x62, 0x62, 0x32, 0xbc,
	0xa3, 0xfb, 0xc4, 0x63, 0x1e, 0xbc, 0x93, 0x58, 0xd2, 0xfb, 0x96, 0xf4, 0x94, 0x25, 0xdd, 0xdf,
	0xb7, 0x75, 0x6e, 0x49, 0x17, 0x96, 0xf4, 0xd8, 0xd2, 0xfc, 0x87, 0xa9, 0x18, 0x6c, 0xcf, 0xf6,
	0x1a, 0xc2, 0x60, 0x3b, 0xd8, 0x15, 0x7f, 0xe2, 0x47, 0x7c, 0x45, 0x8e, 0xe6, 0x6f, 0xef, 0xdf,
	0xa1, 0xba, 0xe3, 0xf1, 0xa0, 0xba, 0xa6, 0xb5, 0xe7, 0xb8, 0x98, 0xa4, 0xa2, 0xec, 0x62, 0x66,
	0x36, 0x0e, 0x73, 0xe1, 0xcd, 0x37, 0xce, 0x5b, 0x45, 0x02, 0x97, 0x39, 0x5d, 0x9c, 0x5b, 0xf0,
	0xf1, 0x45, 0x0b, 0xa8, 0xb5, 0x87, 0xbb, 0xe6, 0xe0, 0x3a, 0xed, 0xcf, 0x02, 0x18, 0x5b, 0xe9,
	0x38, 0xd8, 0x65, 0x2b, 0x9e, 0xbb, 0xeb, 0xd8, 0xf0, 0x03, 0x50, 0x76, 0x5c, 0x8a, 0xad, 0x80,
	0xe0, 0xaa, 0xb2, 0xa0, 0x2c, 0x96, 0x8d, 0xa9, 0xd3, 0x5e, 0x7d, 0x28, 0xec, 0xd5, 0xcb, 0xeb,
	0x52, 0x8e, 0xfa, 0x08, 0xb8, 0x04, 0xd4, 0x36, 0x36, 0x09, 0x26, 0x4f, 0xbc, 0x7d, 0xec, 0x56,
	0x0b, 0x0b, 0xca, 0xe2, 0x98, 0x31, 0x19, 0xf6, 0xea, 0xaa, 0x91, 0x88, 0x51, 0x1a, 0x03, 0xdf,
	0x03, 0xa3, 0xfb, 0xf8, 0x64, 0xd5, 0x64, 0x66, 0xb5, 0x28, 0xe0, 0x6a, 0xd8, 0xab, 0x8f, 0x3e,
	0x88, 0x44, 0x28, 0xd6, 0xc1, 0x45, 0x50, 0xb6, 0x30, 0x61, 0x02, 0x37, 0x2c, 0x70, 0x63, 0x3c,
	0x86, 0x15, 0x29, 0x43, 0x7d, 0x2d, 0xd4, 0xc0, 0x88, 0x65, 0x0a, 0x5c, 0x49, 0xe0, 0x40, 0xd8,
	0xab, 0x8f, 0xac, 0x2c, 0x0b, 0x94, 0xd4, 0xc0, 0x9b, 0xa0, 0x78, 0xe0, 0xd3, 0xea, 0xc8, 0x82,
	0xb2, 0x58, 0x32, 0x54, 0xb9, 0xa1, 0xe2, 0xe3, 0xad, 0x16, 0xe2, 0x72, 0xf8, 0x3f, 0x50, 0x6a,
	0x07, 0x84, 0xb2, 0xea, 0xa8, 0x00, 0x8c, 0x4b, 0x40, 0xc9, 0xe0, 0x42, 0x14, 0xe9, 0x60, 0x13,
	0x80, 0x03, 0x9f, 0xae, 0x3a, 0x87, 0x0e, 0xf5, 0x48, 0xb5, 0x2c, 0x90, 0x50, 0x22, 0xc1, 0xe3,
	0xad, 0x96, 0xd4, 0xa0, 0x14, 0x4a, 0x7b, 0x5e, 0x04, 0x13, 0xab, 0x0e, 0xf5, 0x4d, 0x66, 0xed,
	0x6d, 0x79, 0x1d, 0xc7, 0x3a, 0x81, 0x77, 0x40, 0x99, 0x32, 0x7e, 0x04, 0xf6, 0x89, 0x48, 0x70,
	0xc5, 0xb8, 0x11, 0x27, 0xb8, 0x25, 0xe5, 0x6f, 0x52, 0xdf, 0xa8, 0x8f, 0x86, 0x9f, 0x82, 0x89,
	0xc0, 0xa7, 0x8c, 0x60, 0xb3, 0xdb, 0x0a, 0xda, 0x14, 0xb3, 0x6a, 0x61, 0xa1, 0xb8, 0x58, 0x31,
	0x60, 0xd8, 0xab, 0x4f, 0x6c, 0x67, 0x34, 0x68, 0x00, 0x09, 0x0f, 0x40, 0x89, 0x04, 0x1d, 0x4c,
	0xab, 0xc5, 0x85, 0xe2, 0xa2, 0xda, 0xdc, 0xd0, 0xaf, 0x5a, 0xff, 0x7a, 0x76, 0x3b, 0x28, 0xe8,
	0xe0, 0x24, 0x5f, 0xfc, 0x8f, 0xa2, 0xc8, 0x13, 0x6c, 0x81, 0xd9, 0xdd, 0x8e, 0x77, 0xb4, 0xe2,
	0xb9, 0x8c, 0x78, 0x9d, 0x96, 0xa8, 0xbf, 0x87, 0x66, 0x17, 0x8b, 0xe3, 0xac, 0x18, 0x37, 0xe5,
	0xa2, 0xd9, 0xbb, 0x67, 0x81, 0xd0, 0xd9, 0x6b, 0xe1, 0x6d, 0x30, 0xda, 0xf1, 0xec, 0x4d, 0x6f,
	0x07, 0x8b, 0xd3, 0xae, 0x18, 0xf3, 0xd2, 0xcc, 0xe8, 0x46, 0x24, 0x7e, 0x93, 0x7c, 0xa2, 0x18,
	0xaa, 0xfd, 0x53, 0x04, 0x30, 0x1f, 0x37, 0xac, 0x83, 0xd2, 0x21, 0x26, 0x6d, 0x5a, 0x55, 0x44,
	0x1e, 0x2b, 0x7c, 0x0b, 0x4f, 0xb9, 0x00, 0x45, 0x72, 0x78, 0x0b, 0x54, 0x4c, 0xdf, 0xb9, 0x47,
	0xbc, 0xc0, 0xa7, 0x32, 0xd9, 0xe3, 0x61, 0xaf, 0x5e, 0x59, 0xde, 0x5a, 0x8f, 0x84, 0x28, 0xd1,
	0x73, 0x30, 0xc1, 0xd4, 0x0b, 0x88, 0x25, 0xd3, 0x2c, 0xc1, 0x28, 0x16, 0xa2, 0x44, 0x0f, 0x3f,
	0x01, 0xe3, 0xf1, 0x0f, 0xdf, 0x17, 0xad, 0x0e, 0x8b, 0x05, 0xd3, 0x61, 0xaf, 0x3e, 0x8e, 0xd2,
	0x0a, 0x94, 0xc5, 0xf1, 0x98, 0x03, 0x8a, 0x09, 0xad, 0x96, 0x92, 0x98, 0xb7, 0xb9, 0x00, 0x45,
	0x72, 0xf8, 0x93, 0x02, 0x26, 0x29, 0x26, 0x87, 0x8e, 0x85, 0x97, 0x2d, 0xcb, 0x0b, 0x5c, 0xc6,
	0xeb, 0x9e, 0x1f, 0xfa, 0x83, 0xab, 0x1f, 0x7a, 0x2b, 0x63, 0x10, 0xe1, 0x5d, 0x63, 0x4e, 0xe6,
	0x7d, 0x32, 0xab, 0xa2, 0x68, 0xd0, 0x39, 0xd4, 0x01, 0xe0, 0x91, 0xc9, 0x2c, 0x8e, 0x8a, 0xb0,
	0x27, 0x78, 0xcf, 0x6c, 0xf7, 0xa5, 0x28, 0x85, 0x80, 0x9f, 0x83, 0x49, 0xd7, 0x73, 0xe3, 0x24,
	0x6c, 0xa3, 0x0d, 0x5a, 0x2d, 0x8b, 0x45, 0x33, 0xdc, 0xdd, 0xc3, 0xac, 0x0a, 0x0d, 0x62, 0xb5,
	0xff, 0x82, 0xb9, 0xb5, 0x63, 0xdc, 0xf5, 0x59, 0xae, 0xae, 0xb4, 0x5f, 0x15, 0xa0, 0xa6, 0xa4,
	0xf0, 0x47, 0x05, 0xc0, 0x5c, 0x99, 0x45, 0xd5, 0xf0, 0x4e, 0xd9, 0xca, 0x79, 0x36, 0x26, 0xe3,
	0x2a, 0x95, 0x3e, 0xd0, 0x19, 0x7e, 0xb5, 0x67, 0x05, 0x30, 0x9d, 0x5b, 0x0a, 0x17, 0xc0, 0xb0,
	0xcb, 0xbb, 0x26, 0x9a, 0x15, 0x63, 0xd2, 0xd0, 0xb0, 0x68, 0x12, 0xa1, 0x81, 0xa7, 0x0a, 0xa8,
	0xe5, 0xcc, 0x45, 0xe3, 0x3c, 0x20, 0x26, 0x73, 0xbc, 0x68, 0x30, 0xab, 0xcd, 0x2f, 0xae, 0x71,
	0x4b, 0x19, 0xfb, 0xc6, 0xfb, 0x32, 0xac, 0xda, 0xdb, 0x71, 0xe8, 0x82, 0x38, 0xb5, 0x3f, 0x8a,
	0xe0, 0x02, 0x13, 0x30, 0x00, 0x23, 0x58, 0x9c, 0xaf, 0xc8, 0x88, 0xda, 0x7c, 0x7c, 0xf5, 0x4d,
	0x9d, 0x53, 0x27, 0xd1, 0x0d, 0x12, 0x29, 0x91, 0x74, 0x06, 0x7f, 0x57, 0xc0, 0x4c, 0xd7, 0x3c,
	0x46, 0xf8, 0x20, 0xc0, 0x94, 0xd1, 0x75, 0x77, 0xb7, 0xe3, 0xd8, 0x7b, 0x4c, 0x66, 0xf6, 0xeb,
	0xab, 0x07, 0xb1, 0x99, 0x37, 0x9a, 0x8f, 0x68, 0x2e, 0xec, 0xd5, 0x67, 0xce, 0x40, 0xa2, 0xb3,
	0x62, 0x82, 0x3f, 0x28, 0x40, 0x65, 0xfc, 0xb2, 0x35, 0x02, 0x6b, 0x1f, 0x33, 0x71, 0xcf, 0xaa,
	0xcd, 0xa7, 0x57, 0x8f, 0xf1, 0x49, 0x62, 0xec, 0x8c, 0xda, 0xe6, 0xd7, 0x7d, 0x0a, 0x81, 0xd2,
	0xbe, 0xb5, 0xcf, 0xc0, 0xf8, 0x86, 0x67, 0xdb, 0x8e, 0x6b, 0x4b, 0x82, 0x71, 0x0b, 0x0c, 0x77,
	0xf9, 0xf8, 0x8e, 0xea, 0x39, 0x1e, 0x23, 0xc3, 0x83, 0xb3, 0x5b, 0x80, 0xb4, 0x35, 0xf0, 0xff,
	0xcb, 0xe4, 0x87, 0xdf, 0xef, 0x5d, 0xf3, 0x58, 0xd8, 0x4c, 0xdd, 0xef, 0x7c, 0x29, 0x97, 0x6b,
	0xbb, 0x60, 0xba, 0x85, 0x2d, 0x82, 0xf9, 0xe4, 0xc2, 0x04, 0x5b, 0xd8, 0xb5, 0x30, 0x6c, 0x80,
	0x0a, 0x6f, 0x1f, 0xea, 0x9b, 0x56, 0x1c, 0xcd, 0xb4, 0x5c, 0x59, 0x79, 0x18, 0x2b, 0x50, 0x82,
	0xe9, 0x77, 0x62, 0xe1, 0xbc, 0x4e, 0xd4, 0x7e, 0x51, 0xc0, 0x78, 0x4b, 0x30, 0x23, 0x31, 0x15,
	0x5d, 0x3b, 0xcd, 0x76, 0x94, 0x4b, 0xb2, 0x9d, 0xc2, 0x5b, 0xd9, 0xce, 0x6d, 0x30, 0x66, 0x45,
	0x7c, 0x6d, 0x39, 0xc5, 0xa1, 0xa6, 0xc2, 0x5e, 0x3d, 0xe6, 0x71, 0x11, 0xf3, 0xc9, 0xa0, 0xa2,
	0x04, 0x0c, 0x8c, 0xf0, 0x4b, 0x4c, 0x96, 0x4c, 0x8a, 0x0a, 0x17, 0xa7, 0x48, 0x6b, 0x83, 0x1b,
	0x6f, 0xab, 0x95, 0x98, 0x87, 0x29, 0x17, 0xf1, 0xb0, 0xc2, 0xf9, 0x3c, 0x4c, 0xfb, 0xab, 0x00,
	0x26, 0x63, 0xb6, 0xb3, 0xd2, 0x09, 0x28, 0xc3, 0x04, 0x7e, 0x03, 0xca, 0x9c, 0x4a, 0xef, 0xc4,
	0x79, 0x56, 0x9b, 0x1f, 0xe9, 0x11, 0x23, 0xd6, 0xd3, 0x8c, 0x38, 0x29, 0x70, 0x8e, 0xd6, 0x0f,
	0x97, 0xf4, 0x47, 0xed, 0x6f, 0xb1, 0xc5, 0x36, 0x31, 0x33, 0x13, 0x2e, 0x97, 0xc8, 0x50, 0xdf,
	0x2a, 0xf4, 0xc0, 0x30, 0xf5, 0xb1, 0x25, 0xfb, 0x7d, 0xf3, 0xea, 0xbd, 0x34, 0x10, 0x7a, 0xcb,
	0xc7, 0x56, 0x92, 0x7b, 0xfe, 0x87, 0x84, 0x23, 0x78, 0x04, 0x46, 0x28, 0x33, 0x59, 0x40, 0x65,
	0xfb, 0x3e, 0xba, 0x3e, 0x97, 0xc2, 0xac, 0x31, 0x21, 0x9d, 0x8e, 0x44, 0xff, 0x48, 0xba, 0xd3,
	0x5e, 0x2b, 0x60, 0x66, 0x60, 0xc5, 0x86, 0x43, 0x19, 0xfc, 0x2a, 0x97, 0x63, 0xfd, 0x72, 0x39,
	0xe6, 0xab, 0x45, 0x86, 0xfb, 0x2f, 0x89, 0x58, 0x92, 0xca, 0xaf, 0x0b, 0x4a, 0x0e, 0xc3, 0xdd,
	0x88, 0x66, 0xa9, 0xcd, 0xf5, 0x6b, 0xdb, 0x6d, 0x52, 0x45, 0xeb, 0xdc, 0x3e, 0x8a, 0xdc, 0x68,
	0x1e, 0x98, 0x1d, 0x4c, 0x0b, 0x26, 0x87, 0x98, 0xf0, 0x07, 0x10, 0x76, 0x77, 0x7c, 0xcf, 0x71,
	0x99, 0xec, 0x8c, 0x7e, 0xd8, 0x6b, 0x52, 0x8e, 0xfa, 0x08, 0xde, 0xb8, 0x3b, 0x0e, 0x35, 0xdb,
	0x1d, 0xbc, 0x23, 0x4a, 0xa3, 0x1c, 0x35, 0xee, 0xaa, 0x94, 0xa1, 0xbe, 0x56, 0xfb, 0x6d, 0x24,
	0x97, 0x56, 0x7e, 0xda, 0xf0, 0x3b, 0x30, 0x4a, 0x85, 0xe7, 0x98, 0x78, 0x5c, 0xe3, 0x41, 0x0b,
	0xbb, 0x29, 0xf2, 0x11, 0xf9, 0x41, 0xb1, 0x43, 0xf8, 0x4c, 0xe9, 0x4f, 0x13, 0x31, 0x9c, 0x65,
	0x75, 0xdf, 0xbd, 0x7a, 0x04, 0xe9, 0xb7, 0xa4, 0xf1, 0x1f, 0xe9, 0x38, 0xf3, 0xc2, 0x44, 0x19,
	0x8f, 0xf0, 0xb9, 0x02, 0xc6, 0x69, 0x7a, 0x64, 0xca, 0x72, 0xbf, 0xf7, 0x2e, 0x64, 0x35, 0x65,
	0xce, 0x98, 0x95, 0x41, 0x64, 0x07, 0x33, 0xca, 0x3a, 0x85, 0xdf, 0x03, 0x35, 0x45, 0x4d, 0xc4,
	0x13, 0x45, 0x6d, 0xae, 0x5d, 0x0b, 0x5f, 0x32, 0x66, 0x64, 0x04, 0x69, 0xee, 0x89, 0xd2, 0xee,
	0x38, 0x67, 0x9f, 0xda, 0x49, 0xbf, 0x4f, 0x1c, 0x1c, 0x11, 0x7c, 0xb5, 0x79, 0xff, 0xba, 0x5e,
	0x6a, 0x46, 0x55, 0x86, 0x31, 0xb5, 0x3a, 0xe0, 0x09, 0xe5, 0x7c, 0x43, 0x22, 0x9e, 0x59, 0xfc,
	0xd6, 0x16, 0x6f, 0xe6, 0x77, 0x3a, 0x8e, 0xcc, 0xf5, 0x9f, 0x14, 0xa3, 0x14, 0xa3, 0xd8, 0x91,
	0x36, 0x97, 0xef, 0xc8, 0x68, 0x50, 0xe9, 0xa7, 0xaf, 0x6a, 0x43, 0x2f, 0x5e, 0xd5, 0x86, 0x5e,
	0xbe, 0xaa, 0x0d, 0x3d, 0x0b, 0x6b, 0xca, 0x69, 0x58, 0x53, 0x5e, 0x84, 0x35, 0xe5, 0x65, 0x58,
	0x53, 0xfe, 0x0e, 0x6b, 0xca, 0xcf, 0xaf, 0x6b, 0x43, 0x5f, 0x96, 0x63, 0x87, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x18, 0xb6, 0xc3, 0xdc, 0x26, 0x12, 0x00, 0x00,
}

func (m *ClientConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.QPSDivisor))
	i--
	dAtA[i] = 0x40
	i = encodeVarintGenerated(dAtA, i, uint64(m.Burst))
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.QPS))
	i--
	dAtA[i] = 0x30
	if m.CAData != nil {
		i -= len(m.CAData)
		copy(dAtA[i:], m.CAData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.CAData)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CertData != nil {
		i -= len(m.CertData)
		copy(dAtA[i:], m.CertData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.CertData)))
		i--
		dAtA[i] = 0x22
	}
	if m.KeyData != nil {
		i -= len(m.KeyData)
		copy(dAtA[i:], m.KeyData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.KeyData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BearerToken != nil {
		i -= len(m.BearerToken)
		copy(dAtA[i:], m.BearerToken)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.BearerToken)))
		i--
		dAtA[i] = 0x12
	}
	i--
	if m.Insecure {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DispatchPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.LogMode)
	copy(dAtA[i:], m.LogMode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LogMode)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.FlowControlSchemaName)
	copy(dAtA[i:], m.FlowControlSchemaName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FlowControlSchemaName)))
	i--
	dAtA[i] = 0x22
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UpstreamSubset) > 0 {
		for iNdEx := len(m.UpstreamSubset) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpstreamSubset[iNdEx])
			copy(dAtA[i:], m.UpstreamSubset[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.UpstreamSubset[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Strategy)
	copy(dAtA[i:], m.Strategy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Strategy)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DispatchPolicyRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchPolicyRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchPolicyRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NonResourceURLs) > 0 {
		for iNdEx := len(m.NonResourceURLs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NonResourceURLs[iNdEx])
			copy(dAtA[i:], m.NonResourceURLs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.NonResourceURLs[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.UserGroups) > 0 {
		for iNdEx := len(m.UserGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserGroups[iNdEx])
			copy(dAtA[i:], m.UserGroups[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserGroups[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ServiceAccounts) > 0 {
		for iNdEx := len(m.ServiceAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Users[iNdEx])
			copy(dAtA[i:], m.Users[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Users[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ResourceNames) > 0 {
		for iNdEx := len(m.ResourceNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResourceNames[iNdEx])
			copy(dAtA[i:], m.ResourceNames[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ResourceNames[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Resources[iNdEx])
			copy(dAtA[i:], m.Resources[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Resources[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.APIGroups) > 0 {
		for iNdEx := len(m.APIGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.APIGroups[iNdEx])
			copy(dAtA[i:], m.APIGroups[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.APIGroups[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Verbs) > 0 {
		for iNdEx := len(m.Verbs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Verbs[iNdEx])
			copy(dAtA[i:], m.Verbs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Verbs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExemptFlowControlSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExemptFlowControlSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExemptFlowControlSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FlowControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlowControlSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowControlSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowControlSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FlowControlSchemaConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FlowControlSchemaConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowControlSchemaConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowControlSchemaConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenBucket != nil {
		{
			size, err := m.TokenBucket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxRequestsInflight != nil {
		{
			size, err := m.MaxRequestsInflight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Exempt != nil {
		{
			size, err := m.Exempt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoggingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoggingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoggingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Mode)
	copy(dAtA[i:], m.Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MaxRequestsInflightFlowControlSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxRequestsInflightFlowControlSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxRequestsInflightFlowControlSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Max))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SecretReferecence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretReferecence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretReferecence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Namespace)
	copy(dAtA[i:], m.Namespace)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespace)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SecureServing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecureServing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecureServing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientCAData != nil {
		i -= len(m.ClientCAData)
		copy(dAtA[i:], m.ClientCAData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientCAData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CertData != nil {
		i -= len(m.CertData)
		copy(dAtA[i:], m.CertData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.CertData)))
		i--
		dAtA[i] = 0x12
	}
	if m.KeyData != nil {
		i -= len(m.KeyData)
		copy(dAtA[i:], m.KeyData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.KeyData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceAccountRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccountRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Namespace)
	copy(dAtA[i:], m.Namespace)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespace)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TokenBucketFlowControlSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenBucketFlowControlSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenBucketFlowControlSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Burst))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.QPS))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpstreamCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpstreamClusterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamClusterList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamClusterList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpstreamClusterServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamClusterServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamClusterServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disabled != nil {
		i--
		if *m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	i -= len(m.Endpoint)
	copy(dAtA[i:], m.Endpoint)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Endpoint)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpstreamClusterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamClusterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamClusterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Logging.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.DispatchPolicies) > 0 {
		for iNdEx := len(m.DispatchPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DispatchPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.FlowControl.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.SecureServing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ClientConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Servers) > 0 {
		for iNdEx := len(m.Servers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Servers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamClusterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamClusterStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamClusterStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	if m.BearerToken != nil {
		l = len(m.BearerToken)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.KeyData != nil {
		l = len(m.KeyData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CertData != nil {
		l = len(m.CertData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CAData != nil {
		l = len(m.CAData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.QPS))
	n += 1 + sovGenerated(uint64(m.Burst))
	n += 1 + sovGenerated(uint64(m.QPSDivisor))
	return n
}

func (m *DispatchPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Strategy)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.UpstreamSubset) > 0 {
		for _, s := range m.UpstreamSubset {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.FlowControlSchemaName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.LogMode)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *DispatchPolicyRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Verbs) > 0 {
		for _, s := range m.Verbs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.APIGroups) > 0 {
		for _, s := range m.APIGroups {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Resources) > 0 {
		for _, s := range m.Resources {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ResourceNames) > 0 {
		for _, s := range m.ResourceNames {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, s := range m.Users {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ServiceAccounts) > 0 {
		for _, e := range m.ServiceAccounts {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.UserGroups) > 0 {
		for _, s := range m.UserGroups {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.NonResourceURLs) > 0 {
		for _, s := range m.NonResourceURLs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ExemptFlowControlSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FlowControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, e := range m.Schemas {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *FlowControlSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.FlowControlSchemaConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FlowControlSchemaConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exempt != nil {
		l = m.Exempt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.MaxRequestsInflight != nil {
		l = m.MaxRequestsInflight.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TokenBucket != nil {
		l = m.TokenBucket.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *LoggingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MaxRequestsInflightFlowControlSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Max))
	return n
}

func (m *SecretReferecence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *SecureServing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyData != nil {
		l = len(m.KeyData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CertData != nil {
		l = len(m.CertData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ClientCAData != nil {
		l = len(m.ClientCAData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ServiceAccountRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Namespace)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *TokenBucketFlowControlSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.QPS))
	n += 1 + sovGenerated(uint64(m.Burst))
	return n
}

func (m *UpstreamCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *UpstreamClusterList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *UpstreamClusterServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Disabled != nil {
		n += 2
	}
	return n
}

func (m *UpstreamClusterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.ClientConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.SecureServing.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.FlowControl.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.DispatchPolicies) > 0 {
		for _, e := range m.DispatchPolicies {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.Logging.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *UpstreamClusterStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ClientConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientConfig{`,
		`Insecure:` + fmt.Sprintf("%v", this.Insecure) + `,`,
		`BearerToken:` + valueToStringGenerated(this.BearerToken) + `,`,
		`KeyData:` + valueToStringGenerated(this.KeyData) + `,`,
		`CertData:` + valueToStringGenerated(this.CertData) + `,`,
		`CAData:` + valueToStringGenerated(this.CAData) + `,`,
		`QPS:` + fmt.Sprintf("%v", this.QPS) + `,`,
		`Burst:` + fmt.Sprintf("%v", this.Burst) + `,`,
		`QPSDivisor:` + fmt.Sprintf("%v", this.QPSDivisor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DispatchPolicy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]DispatchPolicyRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(strings.Replace(f.String(), "DispatchPolicyRule", "DispatchPolicyRule", 1), `&`, ``, 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&DispatchPolicy{`,
		`Strategy:` + fmt.Sprintf("%v", this.Strategy) + `,`,
		`UpstreamSubset:` + fmt.Sprintf("%v", this.UpstreamSubset) + `,`,
		`Rules:` + repeatedStringForRules + `,`,
		`FlowControlSchemaName:` + fmt.Sprintf("%v", this.FlowControlSchemaName) + `,`,
		`LogMode:` + fmt.Sprintf("%v", this.LogMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DispatchPolicyRule) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServiceAccounts := "[]ServiceAccountRef{"
	for _, f := range this.ServiceAccounts {
		repeatedStringForServiceAccounts += strings.Replace(strings.Replace(f.String(), "ServiceAccountRef", "ServiceAccountRef", 1), `&`, ``, 1) + ","
	}
	repeatedStringForServiceAccounts += "}"
	s := strings.Join([]string{`&DispatchPolicyRule{`,
		`Verbs:` + fmt.Sprintf("%v", this.Verbs) + `,`,
		`APIGroups:` + fmt.Sprintf("%v", this.APIGroups) + `,`,
		`Resources:` + fmt.Sprintf("%v", this.Resources) + `,`,
		`ResourceNames:` + fmt.Sprintf("%v", this.ResourceNames) + `,`,
		`Users:` + fmt.Sprintf("%v", this.Users) + `,`,
		`ServiceAccounts:` + repeatedStringForServiceAccounts + `,`,
		`UserGroups:` + fmt.Sprintf("%v", this.UserGroups) + `,`,
		`NonResourceURLs:` + fmt.Sprintf("%v", this.NonResourceURLs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExemptFlowControlSchema) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExemptFlowControlSchema{`,
		`}`,
	}, "")
	return s
}
func (this *FlowControl) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSchemas := "[]FlowControlSchema{"
	for _, f := range this.Schemas {
		repeatedStringForSchemas += strings.Replace(strings.Replace(f.String(), "FlowControlSchema", "FlowControlSchema", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSchemas += "}"
	s := strings.Join([]string{`&FlowControl{`,
		`Schemas:` + repeatedStringForSchemas + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowControlSchema) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowControlSchema{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`FlowControlSchemaConfiguration:` + strings.Replace(strings.Replace(this.FlowControlSchemaConfiguration.String(), "FlowControlSchemaConfiguration", "FlowControlSchemaConfiguration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowControlSchemaConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowControlSchemaConfiguration{`,
		`Exempt:` + strings.Replace(this.Exempt.String(), "ExemptFlowControlSchema", "ExemptFlowControlSchema", 1) + `,`,
		`MaxRequestsInflight:` + strings.Replace(this.MaxRequestsInflight.String(), "MaxRequestsInflightFlowControlSchema", "MaxRequestsInflightFlowControlSchema", 1) + `,`,
		`TokenBucket:` + strings.Replace(this.TokenBucket.String(), "TokenBucketFlowControlSchema", "TokenBucketFlowControlSchema", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoggingConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoggingConfig{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaxRequestsInflightFlowControlSchema) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaxRequestsInflightFlowControlSchema{`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretReferecence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecretReferecence{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecureServing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecureServing{`,
		`KeyData:` + valueToStringGenerated(this.KeyData) + `,`,
		`CertData:` + valueToStringGenerated(this.CertData) + `,`,
		`ClientCAData:` + valueToStringGenerated(this.ClientCAData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceAccountRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceAccountRef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenBucketFlowControlSchema) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenBucketFlowControlSchema{`,
		`QPS:` + fmt.Sprintf("%v", this.QPS) + `,`,
		`Burst:` + fmt.Sprintf("%v", this.Burst) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamCluster{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "UpstreamClusterSpec", "UpstreamClusterSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "UpstreamClusterStatus", "UpstreamClusterStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamClusterList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]UpstreamCluster{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "UpstreamCluster", "UpstreamCluster", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&UpstreamClusterList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamClusterServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamClusterServer{`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`Disabled:` + valueToStringGenerated(this.Disabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamClusterSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServers := "[]UpstreamClusterServer{"
	for _, f := range this.Servers {
		repeatedStringForServers += strings.Replace(strings.Replace(f.String(), "UpstreamClusterServer", "UpstreamClusterServer", 1), `&`, ``, 1) + ","
	}
	repeatedStringForServers += "}"
	repeatedStringForDispatchPolicies := "[]DispatchPolicy{"
	for _, f := range this.DispatchPolicies {
		repeatedStringForDispatchPolicies += strings.Replace(strings.Replace(f.String(), "DispatchPolicy", "DispatchPolicy", 1), `&`, ``, 1) + ","
	}
	repeatedStringForDispatchPolicies += "}"
	s := strings.Join([]string{`&UpstreamClusterSpec{`,
		`Servers:` + repeatedStringForServers + `,`,
		`ClientConfig:` + strings.Replace(strings.Replace(this.ClientConfig.String(), "ClientConfig", "ClientConfig", 1), `&`, ``, 1) + `,`,
		`SecureServing:` + strings.Replace(strings.Replace(this.SecureServing.String(), "SecureServing", "SecureServing", 1), `&`, ``, 1) + `,`,
		`FlowControl:` + strings.Replace(strings.Replace(this.FlowControl.String(), "FlowControl", "FlowControl", 1), `&`, ``, 1) + `,`,
		`DispatchPolicies:` + repeatedStringForDispatchPolicies + `,`,
		`Logging:` + strings.Replace(strings.Replace(this.Logging.String(), "LoggingConfig", "LoggingConfig", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamClusterStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamClusterStatus{`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ClientConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Insecure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Insecure = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BearerToken = append(m.BearerToken[:0], dAtA[iNdEx:postIndex]...)
			if m.BearerToken == nil {
				m.BearerToken = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyData = append(m.KeyData[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyData == nil {
				m.KeyData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertData = append(m.CertData[:0], dAtA[iNdEx:postIndex]...)
			if m.CertData == nil {
				m.CertData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAData = append(m.CAData[:0], dAtA[iNdEx:postIndex]...)
			if m.CAData == nil {
				m.CAData = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QPS", wireType)
			}
			m.QPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QPS |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burst", wireType)
			}
			m.Burst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Burst |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QPSDivisor", wireType)
			}
			m.QPSDivisor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QPSDivisor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatchPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = Strategy(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamSubset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamSubset = append(m.UpstreamSubset, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, DispatchPolicyRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowControlSchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowControlSchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogMode = LogMode(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatchPolicyRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchPolicyRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchPolicyRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verbs = append(m.Verbs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIGroups = append(m.APIGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceNames = append(m.ResourceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccounts = append(m.ServiceAccounts, ServiceAccountRef{})
			if err := m.ServiceAccounts[len(m.ServiceAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroups = append(m.UserGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonResourceURLs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonResourceURLs = append(m.NonResourceURLs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExemptFlowControlSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExemptFlowControlSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExemptFlowControlSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, FlowControlSchema{})
			if err := m.Schemas[len(m.Schemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowControlSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowControlSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowControlSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowControlSchemaConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FlowControlSchemaConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowControlSchemaConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowControlSchemaConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowControlSchemaConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exempt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exempt == nil {
				m.Exempt = &ExemptFlowControlSchema{}
			}
			if err := m.Exempt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestsInflight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRequestsInflight == nil {
				m.MaxRequestsInflight = &MaxRequestsInflightFlowControlSchema{}
			}
			if err := m.MaxRequestsInflight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBucket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenBucket == nil {
				m.TokenBucket = &TokenBucketFlowControlSchema{}
			}
			if err := m.TokenBucket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoggingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoggingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoggingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = LogMode(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxRequestsInflightFlowControlSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxRequestsInflightFlowControlSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxRequestsInflightFlowControlSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretReferecence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretReferecence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretReferecence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecureServing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecureServing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecureServing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyData = append(m.KeyData[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyData == nil {
				m.KeyData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertData = append(m.CertData[:0], dAtA[iNdEx:postIndex]...)
			if m.CertData == nil {
				m.CertData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCAData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCAData = append(m.ClientCAData[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientCAData == nil {
				m.ClientCAData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceAccountRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenBucketFlowControlSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenBucketFlowControlSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenBucketFlowControlSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QPS", wireType)
			}
			m.QPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QPS |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burst", wireType)
			}
			m.Burst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Burst |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamClusterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamClusterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamClusterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, UpstreamCluster{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamClusterServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamClusterServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamClusterServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Disabled = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamClusterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamClusterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamClusterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, UpstreamClusterServer{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecureServing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SecureServing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FlowControl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatchPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispatchPolicies = append(m.DispatchPolicies, DispatchPolicy{})
			if err := m.DispatchPolicies[len(m.DispatchPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logging", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Logging.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamClusterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamClusterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamClusterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
